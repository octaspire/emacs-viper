* Lightweight configuration file for GNU Emacs

#+CAPTION: Screenshot of GNU Emacs 29.0.50 running this configuration.
[[./assets/emacs_viper_screenshot.png]]

** About

This is a small configuration file for running GNU Emacs with Vi(per)
keybindings, usable and nice without any external packages.
Configuration file is also pretty short to make it easy to audit.

Keybindings used are a combination of Vi and Emacs bindings.
This is done by using the builtin Viper mode at (Emacs) expert
level 5, that gives wide range of Emacs bindings available in
addition to the Vi bindings.

Configuration should be usable even with older versions
of GNU Emacs, but it is mostly tested on versions 28.X,
and 29.0.X and support of older versions is not a priority.

As stated, the configuration doesn't install any packages,
internal nor external, in its default mode. If wanted, it
is however possible to allow installation of few useful
packages. This can be done by adding this line to file
=custom.el=:

#+begin_src elisp
(setq octaspire/emacs-evil-use-extras t)
#+end_src

This will cause the following packages to be installed:

| PACKAGE NAME     | DESCRIPTION                                                         |
|------------------+---------------------------------------------------------------------|
| use-package      | Helps with configuring and installing packages.                     |
| magit            | Supercharged interface to the Git version control system.           |
| slime            | Mode for Common Lisp development. Installed if ~sbcl~ is found.     |
| paredit          | Structural editing of Lisp code. Installed only if ~sbcl~ is found. |
| goto-last-change | Jump back to previous edit positions in buffers.                    |

** Installation

To use this configuration give the following commands:

#+begin_src shell
cd emacs-viper
make link
#+end_src

This will create symbolic link to user's home directory.
Please note, that if you already have a ~$HOME/.emacs.d~
directory, the links cannot be created until you remove
or rename the existing directory. Link can be removed
with command ~make unlink~. To delete directories
created by Emacs (and packages, if installed), run
command ~make clean~.

If you have GNU ~stow~ installed, it is possible to manage
this configuration using it:

#+begin_src shell
cd emacs-viper
stow -t ~/ emacs
#+end_src

If you don't have ~make~ or ~stow~ installed,
it is possible to run the linking script manually:

#+begin_src shell
cd emacs-viper
sh /etc/link_to_home_dir.sh
#+end_src

** Configuration

The default mode is to run without any packages.
It is, however, possible to allow installation of few useful
packages. This can be done by adding this line to file
=custom.el=:

#+begin_src elisp
(defvar octaspire/emacs-evil-use-extras t)
#+end_src

File =custom.el= is ignored by version control, so it
is a good place to put local customizations.

** Key Bindings

This chapter lists some useful key bindings, divided into
sections by functionality. Table below lists few of
the most important bindings:

| KEY               | TYPE             | ACTION                                                                                         |
|-------------------+------------------+------------------------------------------------------------------------------------------------|
| ~M-/~             |                  | Expand (complete) anything with ~hippie-expand~                                                |
| ~g<motion>~       | VIPER            | Search the thing that vi motion chooses                                                        |
| ~backspace~       | VIPER            | Fixed in term-mode's char submode by advicing                                                  |
| ~.~, ~M-n~, ~N-p~ | VIPER            | Vi's dot repeats a command, Emacs extends this by allowing selection of command                |
| ~C-x p f~         |                  | Find files in project (doesn't use projectile)                                                 |
| ~C-x g~           | MAGIT            | Runs ~magit-status~                                                                            |
| ~C-c C-j~         | ANSI-TERM        | Toggle between char- and line sub modes of the =ansi-term= mode. Line mode shows line numbers. |
| ~C-x C-/~         | GOTO-LAST-CHANGE | Keep jumping backwards to last edit positions in buffer.                                       |
| ~C-c c~           |                  | Compile.                                                                                       |

*** Key Bindings for working with Org mode

| KEY           | ACTION                                            |
|---------------+---------------------------------------------------|
| ~C-c SPC~     | Clear ORG table cell with ~org-table-blank-field~ |
| ~C-c C-x C-i~ | Clock in using ~org-clock-in~                     |
| ~C-c C-x C-o~ | Clock out using ~org-clock-out~                   |
| ~C-c C-x C-r~ | Create ORG clock report with ~org-clock-report~   |

*** Key Bindings for working with bookmarks

| KEY                    | ACTION                                                            |
|------------------------+-------------------------------------------------------------------|
| ~C-x r m bookmark RET~ | Set bookmark to the current file or directory with the given name |
| ~C-x r l~              | List bookmarks                                                    |
| ~C-x r b bookmark RET~ | Jump to named bookmark                                            |
| ~M-x bookmark-save~    | Save all bookmarks to the default bookmark file                   |

*** Key Bindings for working with initialization files

| KEY     | ACTION                                      |
| ~C-c i~ | Open either user's init or extra init file. |

** Troubleshooting

*** Configuration doesn't load

If the configuration cannot be loaded, check if your system's
home directory has files =~/.emacsl.el= and/or =~/.emacs=.
Emacs will load these files before =~/.emacs.d/init.el= gets
a change to load. Rename or remove those files, possibly
merging the contents with ~/.emacs.d/init.el~ (if needed)
to get the configuration to load.

** Miscellaneous Notes

Some useful additions could be:

*** ~$HOME/.bashrc~

Modified ~PS1~ with dynamic line generation, to see better
where previous input was given:

#+begin_src shell
genline()
{
  perl -E "say '-' x $((COLUMNS - 6))"
}

PS1='$(genline)\n\w\n\$ '
#+end_src

*** ~$HOME/.inputrc~

Handy history completion with ~up~/~down~ and (~C-p~/~C-n~ in Emacs). Somewhat similar
to ~C-r~, but starting from the already given input:

#+begin_src shell
#up
"\e[A":history-search-backward
"\C-p":history-search-backward
#down
"\e[B":history-search-forward
"\C-n":history-search-forward
#+end_src

*** Basis for Time Tracking Diary

When using a file having the format shown below,
every day should start with creating a new entry
for the day, and listing the work items for the day.

Clocking in to an item can then be done by going
to the item's header and using =C-c C-x C-i=.
Task can be changed by clocking in to another
task (any running task is clocked out
automatically). Clocking out from a task
can be done manually using =C-c C-x C-o=.

Report for the day can be generated using
=C-c C-x C-r= while the point is inside the
~clocktable~ block. This will set the maximum
level to value that is larger than the default.

#+begin_src org
#+TITLE: Time Tracking Diary
* 2022
** December
*** Sunday 2022-12-18
#+BEGIN: clocktable :scope subtree :maxlevel 6
#+END:
**** External Work
***** item-1
***** item-2
**** Internal Work
***** item-1
***** item-2
#+end_src
